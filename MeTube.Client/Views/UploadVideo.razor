@* @page "/upload"
@using MeTube.Client.Models
@using MeTube.Client.Services
@using System.ComponentModel.DataAnnotations
@inject IVideoService VideoService
@inject NavigationManager NavigationManager

<PageTitle>Upload Video - MeTube</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto bg-white p-6 rounded-lg shadow-md">
        <h1 class="text-2xl font-bold mb-6">Upload New Video</h1>

        <EditForm Model="videoUpload" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="title">Title</label>
                <InputText id="title" class="w-full p-2 border rounded" @bind-Value="videoUpload.Title" />
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="description">Description</label>
                <InputTextArea id="description" class="w-full p-2 border rounded" @bind-Value="videoUpload.Description" rows="4" />
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 mb-2">Video File</label>
                <InputFile OnChange="HandleVideoSelected" accept="video/mp4" />
                @if (videoStream != null)
                {
                    <p class="text-green-600 mt-1">Video file selected</p>
                }
                <p class="text-sm text-gray-500 mt-1">Maximum file size: 500MB, Format: MP4 only</p>
            </div>

            <div class="mb-6">
                <label class="block text-gray-700 mb-2">Thumbnail (Optional)</label>
                <InputFile OnChange="HandleThumbnailSelected" accept="image/*" />
                @if (thumbnailStream != null)
                {
                    <p class="text-green-600 mt-1">Thumbnail selected</p>
                }
                <p class="text-sm text-gray-500 mt-1">Maximum file size: 4MB</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                    @errorMessage
                </div>
            }

            <div class="flex justify-between">
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                        disabled="@(isUploading || videoStream == null)">
                    @if (isUploading)
                    {
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <span>Upload Video</span>
                    }
                </button>
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                        @onclick="NavigateBack">
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private class VideoUpload
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(100, MinimumLength = 3, ErrorMessage = "Title must be between 3 and 100 characters")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required")]
        [StringLength(1000, ErrorMessage = "Description must not exceed 1000 characters")]
        public string Description { get; set; } = string.Empty;
    }

    private VideoUpload videoUpload = new();
    private Stream? videoStream;
    private Stream? thumbnailStream;
    private bool isUploading;
    private string errorMessage = string.Empty;

    private Task HandleVideoSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.Size > 500 * 1024 * 1024) // 500MB limit
        {
            errorMessage = "Video file size must be less than 500MB";
            return Task.CompletedTask;
        }

        if (file.ContentType != "video/mp4")
        {
            errorMessage = "Only MP4 video files are allowed";
            return Task.CompletedTask;
        }

        videoStream = file.OpenReadStream(500 * 1024 * 1024);
        errorMessage = string.Empty;
        return Task.CompletedTask;
    }

    private Task HandleThumbnailSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.Size > 4 * 1024 * 1024) // 4MB limit
        {
            errorMessage = "Thumbnail file size must be less than 4MB";
            return Task.CompletedTask;
        }

        thumbnailStream = file.OpenReadStream(4 * 1024 * 1024);
        errorMessage = string.Empty;
        return Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        if (videoStream == null)
        {
            errorMessage = "Please select a video file";
            return;
        }

        isUploading = true;
        errorMessage = string.Empty;

        try
        {
            var video = new Video
                {
                    Title = videoUpload.Title,
                    Description = videoUpload.Description
                };

            var uploadedVideo = await VideoService.UploadVideoAsync(video, videoStream, "userId");
            if (uploadedVideo != null && thumbnailStream != null)
            {
                await VideoService.UpdateVideoThumbnailAsync(uploadedVideo.Id, thumbnailStream);
            }

            if (uploadedVideo != null)
            {
                NavigateBack();
            }
            else
            {
                errorMessage = "Failed to upload video";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while uploading the video";
        }
        finally
        {
            isUploading = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/manage-videos");
    }
} *@