@page "/video/{VideoId:int}"
@using MeTube.Client.Models
@using MeTube.Client.Services
@using MeTube.DTO
@inject VideoViewModel ViewModel
@inject IJSRuntime JSRuntime
@inject ICommentService CommentService
@inject UserService UserService

<link href="css/video_view.css" rel="stylesheet" />

<div class="container mt-4">
    @if (ViewModel.IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewModel.ErrorMessage
        </div>
    }
    else if (ViewModel.CurrentVideo != null)
    {
        <div class="row justify-content-center">
            <!-- Video Section -->
            <div class="col-lg-8 col-md-12">
                <div class="video-container">
                    <video id="videoPlayer"
                           controls
                           class="video-player"
                           controlsList="nodownload"
                           preload="auto"
                           crossorigin="anonymous"
                           playsinline
                           webkit-playsinline>
                        <source src="@ViewModel.CurrentVideo.VideoUrl" type="video/mp4"
                                codecs="avc1.42E01E, mp4a.40.2">
                        Your browser does not support video playback.
                    </video>

                    <!-- Title and Metadata -->
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <h4 class="fw-bold mb-0">@ViewModel.CurrentVideo.Title</h4>
                            <small class="text-muted">Uploaded @ViewModel.CurrentVideo.DateUploaded.ToString("dd MMM yyyy")</small>
                        </div>
                        <div class="like-section">
                            <button class="btn btn-outline-primary">
                                <i class="bi bi-hand-thumbs-up"></i>
                                <span>13</span>
                            </button>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="mt-3">
                        <p class="lead">@ViewModel.CurrentVideo.Description</p>
                    </div>
                </div>
            </div>

            <!-- Comments Section -->
            <div class="col-lg-4 col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Comments (@ViewModel.Comments.Count)</h5>

                        @if (!string.IsNullOrEmpty(ViewModel.CommentErrorMessage))
                        {
                            <div class="alert alert-danger">
                                @ViewModel.CommentErrorMessage
                            </div>
                        }
                        else
                        {
                            <div class="comment-box">
                                @foreach (var comment in ViewModel.Comments)
                                {
                                    <div class="comment-item mb-3">
                                        <div class="d-flex align-items-start">
                                            <div class="flex-grow-1 ms-3">
                                                <div class="d-flex justify-content-between">
                                                    <strong>@comment.PosterUsername</strong>
                                                    <small class="text-muted">@comment.DateAdded.ToString("HH:mm dd MMM")</small>
                                                </div>
                                                <p class="mb-0">@comment.Content</p>
                                            </div>
                                            <div>
                                                @* Only Admins can edit/delete *@
                                                @if (ViewModel.UserRole == "Admin")
                                                {
                                                    <button class="btn btn-warning btn-sm" @onclick="() => StartEditingComment(comment)">Edit</button>
                                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteComment(comment)">Delete</button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (ViewModel.IsAuthenticated)
                        {
                            <div class="input-group mt-3">
                                <input type="text"
                                       class="form-control"
                                       placeholder="Write a comment..."
                                       @bind="_newComment" />
                                <button class="btn btn-primary"
                                        @onclick="PostComment"
                                        disabled="@(ViewModel.CanPostComment == false)">
                                    Post
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">Log in to post a comment.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (_isEditingComment)
        {
            <div class="comment-edit-popup">
                <div class="input-group">
                    <input type="text"
                           class="form-control"
                           @bind="_commentToEdit.Content"
                           placeholder="Edit your comment..." />
                    <button class="btn btn-primary" @onclick="SaveCommentChanges">Save</button>
                    <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int VideoId { get; set; }

    private string _newComment = string.Empty;
    private bool _isEditingComment = false;
    private Comment _commentToEdit;

    protected override async Task OnParametersSetAsync()
    {
        await ViewModel.LoadVideoAsync(VideoId);
        await ViewModel.InitializeAsync();
        await LoadCommentsAsync();
    }

    private async Task LoadCommentsAsync()
    {
        try
        {
            var comments = await CommentService.GetCommentsByVideoIdAsync(VideoId);
            ViewModel.Comments.Clear();

            if (comments != null && comments.Any())
            {
                foreach (var comment in comments)
                {
                    comment.PosterUsername = await CommentService.GetPosterUsernameAsync(comment.UserId);
                    ViewModel.Comments.Add(comment);
                }
            }
            else
            {
                Console.WriteLine("No comments found.");
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Failed to load comments. Please try again later.";
            Console.Error.WriteLine($"Error loading comments: {ex.Message}");
        }
    }

    private async Task PostComment()
    {
        if (!string.IsNullOrWhiteSpace(_newComment))
        {
            try
            {

                var newCommentDto = new CommentDto
                    {
                        VideoId = VideoId,
                        UserId = 0, // this is checked in the API properly
                        Content = _newComment,
                        DateAdded = DateTime.Now
                    };

                var postedComment = await CommentService.AddCommentAsync(newCommentDto);

                if (postedComment != null)
                {
                    await LoadCommentsAsync();
                    _newComment = string.Empty;
                }
                else
                {
                    ViewModel.CommentErrorMessage = "Failed to post your comment. Please try again.";
                }
            }
            catch (Exception ex)
            {
                ViewModel.CommentErrorMessage = "An error occurred while posting the comment. Please try again.";
                Console.Error.WriteLine($"Error posting comment: {ex.Message}");
            }
        }
        else
        {
            ViewModel.CommentErrorMessage = "Comment cannot be empty.";
        }
    }

    private void StartEditingComment(Comment comment)
    {
        _commentToEdit = comment;
        _isEditingComment = true;
    }

    private async Task SaveCommentChanges()
    {
        if (!string.IsNullOrEmpty(_commentToEdit.Content))
        {
            await ViewModel.EditCommentAsync(_commentToEdit);
            _isEditingComment = false;
            await LoadCommentsAsync();
        }
    }

    private void CancelEdit()
    {
        _isEditingComment = false;
    }

    private async Task DeleteComment(Comment comment)
    {
        var confirmation = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmation)
        {
            await ViewModel.DeleteCommentAsync(comment);
            await LoadCommentsAsync();
        }
    }
}
